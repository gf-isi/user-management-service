// Code generated by MockGen. DO NOT EDIT.
// Source: ../messaging-service/pkg/api/messaging_service/message-service.pb.go

// Package mock_messaging_service is a generated GoMock package.
package mock_messaging_service

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	messaging_service "github.com/influenzanet/messaging-service/pkg/api/messaging_service"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockisExpressionArg_Data is a mock of isExpressionArg_Data interface
type MockisExpressionArg_Data struct {
	ctrl     *gomock.Controller
	recorder *MockisExpressionArg_DataMockRecorder
}

// MockisExpressionArg_DataMockRecorder is the mock recorder for MockisExpressionArg_Data
type MockisExpressionArg_DataMockRecorder struct {
	mock *MockisExpressionArg_Data
}

// NewMockisExpressionArg_Data creates a new mock instance
func NewMockisExpressionArg_Data(ctrl *gomock.Controller) *MockisExpressionArg_Data {
	mock := &MockisExpressionArg_Data{ctrl: ctrl}
	mock.recorder = &MockisExpressionArg_DataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisExpressionArg_Data) EXPECT() *MockisExpressionArg_DataMockRecorder {
	return m.recorder
}

// isExpressionArg_Data mocks base method
func (m *MockisExpressionArg_Data) isExpressionArg_Data() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isExpressionArg_Data")
}

// isExpressionArg_Data indicates an expected call of isExpressionArg_Data
func (mr *MockisExpressionArg_DataMockRecorder) isExpressionArg_Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isExpressionArg_Data", reflect.TypeOf((*MockisExpressionArg_Data)(nil).isExpressionArg_Data))
}

// MockMessagingServiceApiClient is a mock of MessagingServiceApiClient interface
type MockMessagingServiceApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockMessagingServiceApiClientMockRecorder
}

// MockMessagingServiceApiClientMockRecorder is the mock recorder for MockMessagingServiceApiClient
type MockMessagingServiceApiClientMockRecorder struct {
	mock *MockMessagingServiceApiClient
}

// NewMockMessagingServiceApiClient creates a new mock instance
func NewMockMessagingServiceApiClient(ctrl *gomock.Controller) *MockMessagingServiceApiClient {
	mock := &MockMessagingServiceApiClient{ctrl: ctrl}
	mock.recorder = &MockMessagingServiceApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessagingServiceApiClient) EXPECT() *MockMessagingServiceApiClientMockRecorder {
	return m.recorder
}

// Status mocks base method
func (m *MockMessagingServiceApiClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*messaging_service.ServiceStatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Status", varargs...)
	ret0, _ := ret[0].(*messaging_service.ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status
func (mr *MockMessagingServiceApiClientMockRecorder) Status(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockMessagingServiceApiClient)(nil).Status), varargs...)
}

// SendInstantEmail mocks base method
func (m *MockMessagingServiceApiClient) SendInstantEmail(ctx context.Context, in *messaging_service.SendEmailReq, opts ...grpc.CallOption) (*messaging_service.ServiceStatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendInstantEmail", varargs...)
	ret0, _ := ret[0].(*messaging_service.ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}
// QueueEmailTemplateForSending mocks base method
func (m *MockMessagingServiceApiClient) QueueEmailTemplateForSending(ctx context.Context, in *messaging_service.SendEmailReq, opts ...grpc.CallOption) (*messaging_service.ServiceStatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueueEmailTemplateForSending", varargs...)
	ret0, _ := ret[0].(*messaging_service.ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendInstantEmail indicates an expected call of SendInstantEmail
func (mr *MockMessagingServiceApiClientMockRecorder) SendInstantEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInstantEmail", reflect.TypeOf((*MockMessagingServiceApiClient)(nil).SendInstantEmail), varargs...)
}


func (mr *MockMessagingServiceApiClientMockRecorder) QueueEmailTemplateForSending(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInstantEmail", reflect.TypeOf((*MockMessagingServiceApiClient)(nil).QueueEmailTemplateForSending), varargs...)
}

// SendMessageToAllUsers mocks base method
func (m *MockMessagingServiceApiClient) SendMessageToAllUsers(ctx context.Context, in *messaging_service.SendMessageToAllUsersReq, opts ...grpc.CallOption) (*messaging_service.ServiceStatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMessageToAllUsers", varargs...)
	ret0, _ := ret[0].(*messaging_service.ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessageToAllUsers indicates an expected call of SendMessageToAllUsers
func (mr *MockMessagingServiceApiClientMockRecorder) SendMessageToAllUsers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageToAllUsers", reflect.TypeOf((*MockMessagingServiceApiClient)(nil).SendMessageToAllUsers), varargs...)
}

// SendMessageToStudyParticipants mocks base method
func (m *MockMessagingServiceApiClient) SendMessageToStudyParticipants(ctx context.Context, in *messaging_service.SendMessageToStudyParticipantsReq, opts ...grpc.CallOption) (*messaging_service.ServiceStatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMessageToStudyParticipants", varargs...)
	ret0, _ := ret[0].(*messaging_service.ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessageToStudyParticipants indicates an expected call of SendMessageToStudyParticipants
func (mr *MockMessagingServiceApiClientMockRecorder) SendMessageToStudyParticipants(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageToStudyParticipants", reflect.TypeOf((*MockMessagingServiceApiClient)(nil).SendMessageToStudyParticipants), varargs...)
}

// GetAutoMessages mocks base method
func (m *MockMessagingServiceApiClient) GetAutoMessages(ctx context.Context, in *messaging_service.GetAutoMessagesReq, opts ...grpc.CallOption) (*messaging_service.AutoMessages, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAutoMessages", varargs...)
	ret0, _ := ret[0].(*messaging_service.AutoMessages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutoMessages indicates an expected call of GetAutoMessages
func (mr *MockMessagingServiceApiClientMockRecorder) GetAutoMessages(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutoMessages", reflect.TypeOf((*MockMessagingServiceApiClient)(nil).GetAutoMessages), varargs...)
}

// SaveAutoMessage mocks base method
func (m *MockMessagingServiceApiClient) SaveAutoMessage(ctx context.Context, in *messaging_service.SaveAutoMessageReq, opts ...grpc.CallOption) (*messaging_service.AutoMessage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveAutoMessage", varargs...)
	ret0, _ := ret[0].(*messaging_service.AutoMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveAutoMessage indicates an expected call of SaveAutoMessage
func (mr *MockMessagingServiceApiClientMockRecorder) SaveAutoMessage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAutoMessage", reflect.TypeOf((*MockMessagingServiceApiClient)(nil).SaveAutoMessage), varargs...)
}

// DeleteAutoMessage mocks base method
func (m *MockMessagingServiceApiClient) DeleteAutoMessage(ctx context.Context, in *messaging_service.DeleteAutoMessageReq, opts ...grpc.CallOption) (*messaging_service.ServiceStatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAutoMessage", varargs...)
	ret0, _ := ret[0].(*messaging_service.ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAutoMessage indicates an expected call of DeleteAutoMessage
func (mr *MockMessagingServiceApiClientMockRecorder) DeleteAutoMessage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAutoMessage", reflect.TypeOf((*MockMessagingServiceApiClient)(nil).DeleteAutoMessage), varargs...)
}

// GetEmailTemplates mocks base method
func (m *MockMessagingServiceApiClient) GetEmailTemplates(ctx context.Context, in *messaging_service.GetEmailTemplatesReq, opts ...grpc.CallOption) (*messaging_service.EmailTemplates, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEmailTemplates", varargs...)
	ret0, _ := ret[0].(*messaging_service.EmailTemplates)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailTemplates indicates an expected call of GetEmailTemplates
func (mr *MockMessagingServiceApiClientMockRecorder) GetEmailTemplates(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailTemplates", reflect.TypeOf((*MockMessagingServiceApiClient)(nil).GetEmailTemplates), varargs...)
}

// SaveEmailTemplate mocks base method
func (m *MockMessagingServiceApiClient) SaveEmailTemplate(ctx context.Context, in *messaging_service.SaveEmailTemplateReq, opts ...grpc.CallOption) (*messaging_service.EmailTemplate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveEmailTemplate", varargs...)
	ret0, _ := ret[0].(*messaging_service.EmailTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveEmailTemplate indicates an expected call of SaveEmailTemplate
func (mr *MockMessagingServiceApiClientMockRecorder) SaveEmailTemplate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEmailTemplate", reflect.TypeOf((*MockMessagingServiceApiClient)(nil).SaveEmailTemplate), varargs...)
}

// DeleteEmailTemplate mocks base method
func (m *MockMessagingServiceApiClient) DeleteEmailTemplate(ctx context.Context, in *messaging_service.DeleteEmailTemplateReq, opts ...grpc.CallOption) (*messaging_service.ServiceStatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEmailTemplate", varargs...)
	ret0, _ := ret[0].(*messaging_service.ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmailTemplate indicates an expected call of DeleteEmailTemplate
func (mr *MockMessagingServiceApiClientMockRecorder) DeleteEmailTemplate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailTemplate", reflect.TypeOf((*MockMessagingServiceApiClient)(nil).DeleteEmailTemplate), varargs...)
}

// MockMessagingServiceApiServer is a mock of MessagingServiceApiServer interface
type MockMessagingServiceApiServer struct {
	ctrl     *gomock.Controller
	recorder *MockMessagingServiceApiServerMockRecorder
}

// MockMessagingServiceApiServerMockRecorder is the mock recorder for MockMessagingServiceApiServer
type MockMessagingServiceApiServerMockRecorder struct {
	mock *MockMessagingServiceApiServer
}

// NewMockMessagingServiceApiServer creates a new mock instance
func NewMockMessagingServiceApiServer(ctrl *gomock.Controller) *MockMessagingServiceApiServer {
	mock := &MockMessagingServiceApiServer{ctrl: ctrl}
	mock.recorder = &MockMessagingServiceApiServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessagingServiceApiServer) EXPECT() *MockMessagingServiceApiServerMockRecorder {
	return m.recorder
}

// Status mocks base method
func (m *MockMessagingServiceApiServer) Status(arg0 context.Context, arg1 *empty.Empty) (*messaging_service.ServiceStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0, arg1)
	ret0, _ := ret[0].(*messaging_service.ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status
func (mr *MockMessagingServiceApiServerMockRecorder) Status(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockMessagingServiceApiServer)(nil).Status), arg0, arg1)
}

// SendInstantEmail mocks base method
func (m *MockMessagingServiceApiServer) SendInstantEmail(arg0 context.Context, arg1 *messaging_service.SendEmailReq) (*messaging_service.ServiceStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendInstantEmail", arg0, arg1)
	ret0, _ := ret[0].(*messaging_service.ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendInstantEmail indicates an expected call of SendInstantEmail
func (mr *MockMessagingServiceApiServerMockRecorder) SendInstantEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInstantEmail", reflect.TypeOf((*MockMessagingServiceApiServer)(nil).SendInstantEmail), arg0, arg1)
}

// QueueEmailTemplateForSending mocks base method
func (m *MockMessagingServiceApiServer) QueueEmailTemplateForSending(arg0 context.Context, arg1 *messaging_service.SendEmailReq) (*messaging_service.ServiceStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueEmailTemplateForSending", arg0, arg1)
	ret0, _ := ret[0].(*messaging_service.ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueEmailTemplateForSending indicates an expected call of QueueEmailTemplateForSending
func (mr *MockMessagingServiceApiServerMockRecorder) QueueEmailTemplateForSending(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueEmailTemplateForSending", reflect.TypeOf((*MockMessagingServiceApiServer)(nil).QueueEmailTemplateForSending), arg0, arg1)
}

// SendMessageToAllUsers mocks base method
func (m *MockMessagingServiceApiServer) SendMessageToAllUsers(arg0 context.Context, arg1 *messaging_service.SendMessageToAllUsersReq) (*messaging_service.ServiceStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageToAllUsers", arg0, arg1)
	ret0, _ := ret[0].(*messaging_service.ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessageToAllUsers indicates an expected call of SendMessageToAllUsers
func (mr *MockMessagingServiceApiServerMockRecorder) SendMessageToAllUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageToAllUsers", reflect.TypeOf((*MockMessagingServiceApiServer)(nil).SendMessageToAllUsers), arg0, arg1)
}

// SendMessageToStudyParticipants mocks base method
func (m *MockMessagingServiceApiServer) SendMessageToStudyParticipants(arg0 context.Context, arg1 *messaging_service.SendMessageToStudyParticipantsReq) (*messaging_service.ServiceStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageToStudyParticipants", arg0, arg1)
	ret0, _ := ret[0].(*messaging_service.ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessageToStudyParticipants indicates an expected call of SendMessageToStudyParticipants
func (mr *MockMessagingServiceApiServerMockRecorder) SendMessageToStudyParticipants(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageToStudyParticipants", reflect.TypeOf((*MockMessagingServiceApiServer)(nil).SendMessageToStudyParticipants), arg0, arg1)
}

// GetAutoMessages mocks base method
func (m *MockMessagingServiceApiServer) GetAutoMessages(arg0 context.Context, arg1 *messaging_service.GetAutoMessagesReq) (*messaging_service.AutoMessages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutoMessages", arg0, arg1)
	ret0, _ := ret[0].(*messaging_service.AutoMessages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutoMessages indicates an expected call of GetAutoMessages
func (mr *MockMessagingServiceApiServerMockRecorder) GetAutoMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutoMessages", reflect.TypeOf((*MockMessagingServiceApiServer)(nil).GetAutoMessages), arg0, arg1)
}

// SaveAutoMessage mocks base method
func (m *MockMessagingServiceApiServer) SaveAutoMessage(arg0 context.Context, arg1 *messaging_service.SaveAutoMessageReq) (*messaging_service.AutoMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAutoMessage", arg0, arg1)
	ret0, _ := ret[0].(*messaging_service.AutoMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveAutoMessage indicates an expected call of SaveAutoMessage
func (mr *MockMessagingServiceApiServerMockRecorder) SaveAutoMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAutoMessage", reflect.TypeOf((*MockMessagingServiceApiServer)(nil).SaveAutoMessage), arg0, arg1)
}

// DeleteAutoMessage mocks base method
func (m *MockMessagingServiceApiServer) DeleteAutoMessage(arg0 context.Context, arg1 *messaging_service.DeleteAutoMessageReq) (*messaging_service.ServiceStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAutoMessage", arg0, arg1)
	ret0, _ := ret[0].(*messaging_service.ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAutoMessage indicates an expected call of DeleteAutoMessage
func (mr *MockMessagingServiceApiServerMockRecorder) DeleteAutoMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAutoMessage", reflect.TypeOf((*MockMessagingServiceApiServer)(nil).DeleteAutoMessage), arg0, arg1)
}

// GetEmailTemplates mocks base method
func (m *MockMessagingServiceApiServer) GetEmailTemplates(arg0 context.Context, arg1 *messaging_service.GetEmailTemplatesReq) (*messaging_service.EmailTemplates, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailTemplates", arg0, arg1)
	ret0, _ := ret[0].(*messaging_service.EmailTemplates)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailTemplates indicates an expected call of GetEmailTemplates
func (mr *MockMessagingServiceApiServerMockRecorder) GetEmailTemplates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailTemplates", reflect.TypeOf((*MockMessagingServiceApiServer)(nil).GetEmailTemplates), arg0, arg1)
}

// SaveEmailTemplate mocks base method
func (m *MockMessagingServiceApiServer) SaveEmailTemplate(arg0 context.Context, arg1 *messaging_service.SaveEmailTemplateReq) (*messaging_service.EmailTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEmailTemplate", arg0, arg1)
	ret0, _ := ret[0].(*messaging_service.EmailTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveEmailTemplate indicates an expected call of SaveEmailTemplate
func (mr *MockMessagingServiceApiServerMockRecorder) SaveEmailTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEmailTemplate", reflect.TypeOf((*MockMessagingServiceApiServer)(nil).SaveEmailTemplate), arg0, arg1)
}

// DeleteEmailTemplate mocks base method
func (m *MockMessagingServiceApiServer) DeleteEmailTemplate(arg0 context.Context, arg1 *messaging_service.DeleteEmailTemplateReq) (*messaging_service.ServiceStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmailTemplate", arg0, arg1)
	ret0, _ := ret[0].(*messaging_service.ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmailTemplate indicates an expected call of DeleteEmailTemplate
func (mr *MockMessagingServiceApiServerMockRecorder) DeleteEmailTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailTemplate", reflect.TypeOf((*MockMessagingServiceApiServer)(nil).DeleteEmailTemplate), arg0, arg1)
}
